import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI
from datetime import datetime
import time
import os
from collections import deque
import random

# Bot token and admin IDs
TOKEN = '7283575001:AAFC9VCNgi3uImO8wGhhYmQxgxpwlg6sYH0'  # CHANGE TO YOUR BOT TOKEN
# List of admin IDs
ADMIN_IDS = [804644988]  # Add more IDs if needed

logging.basicConfig(level=logging.INFO)

# Dictionary to track question count and registered users
user_questions = {}
registered_users = set()
MAX_QUESTIONS = 3
VIP_USERS = set()  # Users with unlimited questions

# Special link parameter for unlimited access
VIP_DEEP_LINK = "beautyvip"

# Queue for processing messages sequentially
message_queue = deque()
processing = False

bot = Bot(TOKEN)
dp = Dispatcher()

# Create directory for logs if it doesn't exist
os.makedirs("logs", exist_ok=True)


def log_conversation(user_id, user_message, bot_response):
    """Log conversations to a file for each user"""
    with open(f"logs/user_{user_id}.txt", "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] USER: {user_message}\n")
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] BOT: {bot_response}\n\n")


async def animate_thinking_message(message: types.Message):
    """
    –ê–Ω–∏–º–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è "–¥—É–º–∞—é" —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –∏ —Ç–æ—á–∫–∞–º–∏.
    –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –¥–æ–ª–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.
    """
    # –ù–∞–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    emojis = ["‚ú®", "üí≠", "üß†", "üí´", "‚úçÔ∏è", "üíÖ", "üíÑ", "üëë", "üíé", "üåü"]
    dots_variations = [".", "..", "...", "...."]

    logging.info("Starting animation task")

    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω
        iteration = 0
        while True:
            # –°–ª—É—á–∞–π–Ω–æ–µ —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞
            emoji = random.choice(emojis)

            # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            for dots in dots_variations:
                text = f"–£–∂–µ –¥—É–º–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å{dots} {emoji}"
                logging.info(f"Animation update {iteration}: {text}")
                await message.edit_text(text)
                await asyncio.sleep(0.7)  # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                iteration += 1
    except asyncio.CancelledError:
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏
        logging.info("Animation task canceled normally")
        pass
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
        pass

def get_limit_reached_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", url="http://beauty.reels.ursu.tilda.ws")]
    ])


def get_reminder_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", url="http://beauty.reels.ursu.tilda.ws")]
    ])


async def notify_admins_about_new_user(user: types.User) -> None:
    """
    Function to send notifications to all admins about a new user
    with improved formatting
    """
    message_text = (
        f"üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        f"ID: <code>{user.id}</code>\n"
        f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: <a href='tg://user?id={user.id}'>{user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</a>"
    )

    # Send message to all admins in the list
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message_text, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Error sending notification to admin {admin_id}: {e}")


# START COMMAND HANDLER
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    user_questions[user.id] = 0

    # Check for VIP deep link
    if message.text and len(message.text.split()) > 1:
        deep_link = message.text.split()[1]
        if deep_link == VIP_DEEP_LINK:
            VIP_USERS.add(user.id)
            await message.answer(
                f"‚ú® <b>VIP-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> ‚ú®\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.",
                parse_mode='HTML'
            )

    # Check if user was already registered
    if user.id not in registered_users:
        # Send notification to all admins
        await notify_admins_about_new_user(user)

        # Add user to the list of registered users
        registered_users.add(user.id)

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –î–∏–∞–Ω–∞ –£—Ä—Å—É. –Ø –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —É—á–µ–Ω–∏—Ü –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. "
        "–Ø —É—á–∏–ª–∞—Å—å –Ω–∞ –∫—É—Ä—Å–µ –î–∏–∞–Ω—ã ¬´–ë—å—é—Ç–∏-reels¬ª, –ø–æ—ç—Ç–æ–º—É –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö "
        "–ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –¥–ª—è –±—å—é—Ç–∏-–º–∞—Å—Ç–µ—Ä–æ–≤\n\n"
        "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å üëá",
        parse_mode='HTML'
    )


# Handler for message processing queue
async def process_message_queue():
    global processing

    if processing:
        return

    processing = True

    while message_queue:
        message, is_vip = message_queue.popleft()
        await process_user_message(message, is_vip)

    processing = False


# Main message processing function
async def process_user_message(message: Message, is_vip: bool):
    user = message.from_user

    # Create OpenAI client
    client = OpenAI(
        base_url="https://api.langdock.com/openai/eu/v1",
        api_key="sk-NdNXwXWKDLPPIy7axnw2Kvy-z5JiwxLoGzJfNjSNXZRPeqi4OD1iS-AS4mPkAZBJJL-2WDUHSJIYCgg1xgEppw"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥—É–º–∞–µ–º
    thinking_message = await message.answer("–£–∂–µ –¥—É–º–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å‚ú®")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ—á–µ–∫ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
    animation_task = asyncio.create_task(animate_thinking_message(thinking_message))

    try:
        # Generate response with extended context
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": """–¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –î–∏–∞–Ω–∞ –£—Ä—Å—É, —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –±—å—é—Ç–∏-–º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ Reels. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º —Ç–æ–Ω–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —é–º–æ—Ä–∞ –∏ –æ–±–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ ‚ú®, üí´, üî•, üíÑ, üíÖ, üëë, üíé, üåü.
–¢–≤–æ—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –æ–ø—ã—Ç:

–¢—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –±—å—é—Ç–∏-–º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∫–æ—É—á ICF –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É
–í –±—å—é—Ç–∏-—Å—Ñ–µ—Ä–µ –±–æ–ª–µ–µ 6 –ª–µ—Ç
–ü—Ä–æ—à–ª–∞ –ø—É—Ç—å –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω—É–ª—è –¥–æ –¥–æ—Ö–æ–¥–∞ 200–∫+ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –æ–±—É—á–µ–Ω–∏—è—Ö
–ß–µ—Ä–µ–∑ Reels –ø—Ä–∏–≤–ª–µ–∫–ª–∞ –≤ —Å–≤–æ–π –±–ª–æ–≥ 20,000 —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
–û–±—É—á–∏–ª–∞ —Ç—ã—Å—è—á–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é

–¢–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–∑–≥–ª—è–¥—ã:

"–ö—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç = –¥–µ–Ω—å–≥–∏"
"–ö—Ä–∞—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –¥–æ—Ö–æ–¥"
"–û—Ç —Ö–æ–±–±–∏ –∫ –±–∏–∑–Ω–µ—Å—É"
–î–µ–π—Å—Ç–≤–∏–µ –≤–∞–∂–Ω–µ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π: "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –¥–µ–ª–∞—Ç—å"
–í–∞–∂–Ω–æ—Å—Ç—å –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –±—å—é—Ç–∏-–º–∞—Å—Ç–µ—Ä–∞
Reels –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
"–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–±–∏—Ä–∞–π—Å—è"
–ë—å—é—Ç–∏-–±–∏–∑–Ω–µ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π –¥–æ—Ö–æ–¥
–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è - –¥–≤–∏–≥–∞—Ç–µ–ª—å —Ä–∞–∑–≤–∏—Ç–∏—è
–ó–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–æ–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–°–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–∞–µ—à—å:

–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –±–∏–æ
–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–µ–Ω—Ç—ã —Å —Ä–∞–±–æ—Ç–∞–º–∏
–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
Reels –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
–ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞–º —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ —Å–≤–æ—é –Ω–∏—à—É
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–∏—Ö –∫–µ–π—Å–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ/–ø–æ—Å–ª–µ
–í–∞–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥
–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
–ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥

–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã:

–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Å–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞
–í—ã–¥–µ–ª—è–µ—à—å –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
–†–∞–∑–±–∏–≤–∞–µ—à—å –¥–ª–∏–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã –¥–ª—è –ª–µ–≥–∫–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
–î–æ–±–∞–≤–ª—è–µ—à—å —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏
–ó–∞–≤–µ—Ä—à–∞–µ—à—å –æ—Ç–≤–µ—Ç—ã –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –ø—Ä–∏–∑—ã–≤–∞–º–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –º–Ω–µ–Ω–∏–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥ –∏ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫
–î–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
–ü–æ–æ—â—Ä—è–µ—à—å –¥–µ–π—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–∞
–ì–æ–≤–æ—Ä–∏—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ —Å –ª–∏—á–Ω—ã–º–∏ —Ä–µ–º–∞—Ä–∫–∞–º–∏
–ù–µ –±–æ–∏—à—å—Å—è –æ–±—Å—É–∂–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏ —Ç–æ, –∫–∞–∫ –±—å—é—Ç–∏-–º–∞—Å—Ç–µ—Ä–∞–º –∏—Ö –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å

–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ–π –æ–ø—ã—Ç –≤ –±—å—é—Ç–∏-—Å—Ñ–µ—Ä–µ, –æ–±—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –≤ Instagram, —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ Reels, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –≤—Å–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º –±—å—é—Ç–∏-–±–∏–∑–Ω–µ—Å–∞.."""
                },
                {"role": "user", "content": message.text}
            ]
        )
        text = completion.choices[0].message.content

        # No automatic promotion at the end - follow exactly the instructions
        # The AI model should already include appropriate references to the course based on the system prompt

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "thinking"
        if 'animation_task' in locals() and animation_task is not None:
            animation_task.cancel()
        await bot.delete_message(chat_id=thinking_message.chat.id, message_id=thinking_message.message_id)

        # Send the response
        await message.answer(text, parse_mode="Markdown")

        # Log the conversation
        log_conversation(user.id, message.text, text)

        # Increase question counter for non-VIP users
        if not is_vip:
            user_questions[user.id] += 1

            # Check if limit is reached after this question
            if user_questions[user.id] >= MAX_QUESTIONS:
                await message.answer(
                    f"–Ø —Ö–æ—Ç—å –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –î–∏–∞–Ω–∞, –Ω–æ —Ç–æ–∂–µ –º–æ–≥—É —É—Å—Ç–∞—Ç—å üò¥\n\n"
                    "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã, –Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤ –±—å—é—Ç–∏-—Å—Ñ–µ—Ä–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è! "
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –≤–ø—É—Å—Ç—É—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ —É–∂–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Üüí∏\n\n"
                    "–î–∏–∞–Ω–∞, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ–π –æ–ø—ã—Ç, —Å–æ–∑–¥–∞–ª–∞ –∫—É—Ä—Å ¬´–ë—å—é—Ç–∏-reels¬ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ª—é–±–æ–π –º–∞—Å—Ç–µ—Ä —Å–º–æ–∂–µ—Ç "
                    "–ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–±–∏—Ç—å –∑–∞–ø–∏—Å—å!\n\n"
                    "–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å –ª—é–±–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –±–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π? –ó–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏üëâ",
                    reply_markup=get_limit_reached_keyboard()
                )
    except Exception as e:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "thinking"
        if 'animation_task' in locals() and animation_task is not None:
            animation_task.cancel()
        await bot.delete_message(chat_id=thinking_message.chat.id, message_id=thinking_message.message_id)

        # Send error message
        logging.error(f"Error processing message: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –î–∏–∞–Ω–µ —á–µ—Ä–µ–∑ –∞–Ω–∫–µ—Ç—É –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å.",
            reply_markup=get_limit_reached_keyboard()
        )


# HANDLER FOR ANY TEXT MESSAGE
@dp.message(lambda message: message.text)
async def filter_messages(message: Message):
    user = message.from_user

    # Initialize question counter if not exists
    if user.id not in user_questions:
        user_questions[user.id] = 0

    # Check if user is VIP
    is_vip = user.id in VIP_USERS

    # Check question limit for non-VIP users
    if not is_vip and user_questions[user.id] >= MAX_QUESTIONS:
        await message.answer(
            f"{user.first_name}, –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–æ —è –∑–Ω–∞—é –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å! "
            "–ù–∞ –∫—É—Ä—Å–µ ¬´–ë—å—é—Ç–∏-reels¬ª —Ç—ã –Ω–∞–π–¥–µ—à—å –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! "
            "–ó–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏üëâ",
            reply_markup=get_limit_reached_keyboard()
        )
        return

    # If queue is getting long, inform user
    if len(message_queue) > 5:
        await message.answer(
            f"{user.first_name}, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –±—å—é—Ç–∏-–º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞–¥–∞—é—Ç –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, "
            "–æ—Ç–≤–µ—á—É —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–∞—Ä—ã –º–∏–Ω—É—Ç‚è∞"
        )

    # Add message to processing queue
    message_queue.append((message, is_vip))

    # Start processing the queue if not already processing
    asyncio.create_task(process_message_queue())


# Scheduled reminder
async def send_reminder():
    """Send reminder to users who haven't filled the form yet"""
    while True:
        # Wait for 2 hours
        await asyncio.sleep(7200)  # 2 * 60 * 60 seconds

        for user_id in registered_users:
            if user_id not in VIP_USERS and user_id in user_questions and user_questions[user_id] > 0:
                try:
                    user = await bot.get_chat(user_id)
                    await bot.send_message(
                        user_id,
                        f"{user.first_name}, –∫–∞–∂–µ—Ç—Å—è, –≤—ã —É–ø—É—Å–∫–∞–µ—Ç–µ –∫–æ–µ-—á—Ç–æ –≤–∞–∂–Ω–æ–µ! "
                        "–Ø –Ω–µ –≤–∏–∂—É –≤–∞—Å –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —Ç–≥-–∫–∞–Ω–∞–ª–µ –±—É–¥—É—â–∏—Ö —É—á–µ–Ω–∏—Ü –∫—É—Ä—Å–∞ ¬´–ë—å—é—Ç–∏-reels¬ª! üò±\n\n"
                        "–ò–º–µ–Ω–Ω–æ —Ç—É–¥–∞ —Ç—ã –ø–æ–ø–∞–¥–µ—à—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ãüëâ http://beauty.reels.ursu.tilda.ws\n\n"
                        "–í–Ω—É—Ç—Ä–∏ ‚Äì —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞, —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, "
                        "–ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
                        "–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è ‚Äì –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                        reply_markup=get_reminder_keyboard()
                    )
                except Exception as e:
                    logging.error(f"Error sending reminder to user {user_id}: {e}")


async def main():
    # Start the reminder task
    asyncio.create_task(send_reminder())

    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())